--Ejercicio 3.1
select distinct ciudad from proyecto;

--Ejercicio 3.2
select codpro, codpie, codpj from ventas;

--Ejercicio 3.3
select *from pieza where ciudad = 'Madrid' and color='Gris' or color='Rojo';

--Ejercicio 3.4
select codpro,codpie,codpj from ventas where 200<=cantidad and cantidad <=300;

--Ejercicio 3.5
select codpie from pieza where nompie like '_ornillo';

--Ejemplo interesante 3.5
select cantidad/12, round(cantidad/12), trunc(cantidad/12,3), 
floor(cantidad/12), ceil(cantidad/12) from ventas
where (cantidad/12)>10;

--Ejercicio 3.6
select table_name 
from ALL_TABLES
where lower(TALBE_NAME) like '%ventas';


--Ejemplo 3.8
(select distinct ciudad from proveedor where status>2) MINUS
(select distinct ciudad from pieza where codpie='P1');

--Ejercicio 3.7   //Resolver con producto cartesiano mejor.
(select ciudad from proveedor where status>2) INTERSECT 
(select P1.ciudad from pieza P1, pieza P2
 where P2.codpie!='P1' and P1.ciudad!=P2.ciudad);

--Ejercicio 3.8
(select codpj
from proyecto)
minus
(select distinct codpj
from ventas
where codpro != 'S1');

--Ejercicio 3.9
(select ciudad from proyecto) UNION
(select ciudad from pieza) UNION
(select ciudad from proveedor);

--Ejercicio 3.10
(select ciudad from proyecto) UNION ALL
(select ciudad from pieza) UNION ALL
(select ciudad from proveedor);

--Ejercicio 3.11
select count(*) from ventas, proveedor;
--sin el count tendriamos que ir al final de la tabla y mirar:
select * from ventas,proveedor;

--Ejemplo 3.9
select codpro,codpie,codpj from proveedor, proyecto, pieza
where proveedor.ciudad = proyecto.ciudad AND proyecto.ciudad = pieza.ciudad;

--Ejemplo 3.10
select codpro,codpie,codpj from
(select * from proveedor where ciudad = 'Londres'),
(select * from proyecto where ciudad = 'Londres'),
(select * from pieza where ciudad = 'Londres');

--Ejercicio 3.12
(select codpro, codpie, codpj from ventas) INTERSECT
(select codpro, codpie, codpj from proveedor, proyecto, pieza
where proveedor.ciudad = proyecto.ciudad AND proyecto.ciudad = pieza.ciudad);

--sin el intersect 

select codpro,codpie, codpj
from proveedor, pieza, proyecto, ventas
where proveedor.ciudad=pieza.ciudad and pieza.ciudad=proyecto.ciudad
and proveedor.codpro=ventas.codpro and pieza.codpie=ventas.codpie and
proyecto.codpj=ventas.codpj;

--Ejercicio 3.13
select p.codpro, q.codpro 
from proveedor p, proveedor q
where p.ciudad != q.ciudad;

--Ejercicio 3.14
(select * from pieza)MINUS
(select A.*
from pieza A, pieza B
where A.peso < B.peso);

--Ejemplo 3.12
select nompro, cantidad 
from proveedor natural join (select * from ventas where cantidad > 800);

-- o también 
select nompro, cantidad
from proveedor p, (select * from ventas where cantidad > 800)v
where p.codpro=v.codpro;

-- o también con una equi-reunion
select nompro, cantidad
from proveedor p join (select * from ventas where cantidad > 800)v
on (p.codpro=v.codpro);

--Ejercicio 3.15
select codpie
from (select * from proveedor where ciudad='Madrid') natural join ventas;

--Ejercicio 3.16
select *
from (ventas v natural join proveedor p) join proyecto q on p.ciudad=q.ciudad;

--Ejercicio 3.17
select nompro
from proveedor
order by nompro;  --orden alfabético

select nompro
from proveedor;   --orden como viene en la tabla

--Ejercicio 3.18
select codpro, codpie, codpj
from ventas
order by cantidad, fecha desc;

--Ejemplo 3.14
select distinct codpie
from ventas
where codpro in (select codpro from proveedor where ciudad='Londres');

--Ejercicio 3.19
select codpie
from ventas
where codpro in (select codpro from proveedor where ciudad='Madrid');
--                                ==
select codpie
from (select * from proveedor where ciudad='Madrid') natural join ventas;

--Ejercicio 3.20
select codpj
from proyecto
where ciudad in (select ciudad from pieza);

--Ejercicio 3.21
select codpj
from proyecto
where codpj not in (select codpj from ventas,proveedor,pieza
where ventas.codpro=proveedor.codpro and ventas.codpie = pieza.codpie
and proveedor.ciudad='Londres' and pieza.color='Rojo');

--Ejercicio 3.22
select codpie
from pieza
where peso > ALL (select peso from pieza where nompie like '_ornillo');

--Ejercicio 3.23
select codpie
from pieza
where peso >= all (select peso from pieza);

--Ejemplo División 1 (Encontrar los proveedores que han suministrado todas las piezas)
select codpro
from proveedor
where not exists (
    select codpie
    from pieza
    MINUS
    select codpie
    from ventas
    where ventas.codpro=proveedor.codpro);
    
-- O 

select codpro
from ventas
minus
(select codpro
from ((select v.codpro, p.codpie from 
      (select distinct codpro from ventas) v,
      (select codpie from pieza) p)
minus               -- Aquí se están calculando las parejas 
                    -- (proveedor, pieza) tales que codpro no suministra codpie.
(select codpro,codpie from ventas)));

--Ejercicio 3.24
select codpie
from pieza
where not exists(
(select codpj from proyecto
where ciudad = 'Londres')
minus
select codpj from ventas
where ventas.codpie = pieza.codpie);

--Ejercicio 3.25
select codpro
from proveedor
where not exists(
select ciudad from proyecto
minus
select distinct ciudad
from ventas natural join pieza
where ventas.codpro=proveedor.codpro);

-- o

select codpro

--Ejercicio 3.26
select count(*) 
from ventas
where cantidad > 1000;

--Ejercicio 3.27
select max(peso)
from pieza;

--Ejercicio 3.28
select codpie
from pieza 
where peso = (select max(peso) from pieza);

--Ejercicio 3.29
select codpie, max(peso)
from pieza;  -- ERROR:  "not a single-group group function"

--Ejercicio 3.30
select codpro
from proveedor
where (select count(*) from ventas where ventas.codpro=proveedor.codpro)>3;

--Ejemplo 3.20
select codpro, count(*), max(cantidad)
from ventas
group by codpro;

--Ejercicio 3.31
select nompie, avg(cantidad)
from ventas natural join pieza group by codpie, nompie;

--Ejercicio 3.32
select codpro, avg(cantidad) 
from ventas 
where codpie='P1'
group by codpro;

--Ejercicio 3.33
select codpj, codpie, sum(cantidad)
from ventas
group by codpj, codpie;

--Ejemplo 3.21 (Having)
select codpro, avg(cantidad)
from ventas
group by codpro
having count(*)>3;

--Ejemplo 3.22
select codpro, codpie, avg(cantidad)
from ventas
where codpie='P1'
group by codpro, codpie
having count(*) between 2 and 10;

--Ejercicio 3.34
select v.codpro, v.codpj, j.nompj, avg(v.cantidad)
from ventas v, proyecto j
where v.codpj=j.codpj
group by v.codpj, j.nompj, v.codpro;

Si quitamos el nombre del proyecto tanto del select
como del group by y order by, los grupos siguen siendo
los mismos.

--o

select codpro, nompj, avg(cantidad)
from ventas natural join proyecto
group by codpro, nompj


--Ejercicio 3.35
select nompro
from proveedor
where codpro in (select codpro from ventas
group by codpro
having sum(cantidad)>1000);

--Ejemplo 3.24 (subconsulta having)Mostrar el proveedor que más ha vendido en total.
select codpro, sum(cantidad)
from ventas
group by codpro
having sum(cantidad) = (select max(sum(v.cantidad))
                       from ventas v
                       group by v.codpro);

--Ejercicio 3.36
select codpie, sum(cantidad)
from ventas
group by codpie
having sum(cantidad) = (select max(sum(cantidad)) 
                        from ventas v
                        group by v.codpie);
                        
--Ejercicio 3.38
select to_char(fecha, 'MM'), avg(cantidad)
from ventas
group by  to_char(fecha, 'MM');

-- EJERCICIO 3.42
select codpro
from ventas
group by codpro
having sum(cantidad) > (select sum(cantidad) from ventas where codpro='S1');

-- EJERCICIO 3.43
select codpro, sum(cantidad)
from ventas
group by codpro
having sum(cantidad) >= (select max(sum(cantidad)) from ventas group by codpro);

--EJERCICIO 3.44
select codpro from proveedor
where codpro!='S3' and
not exists (select distinct ciudad from ventas natural join proyecto where codpro='S3'
minus
select ciudad from ventas natural join proyecto where
ventas.codpro=proveedor.codpro);

-- EJERCICIO 3.45
select codpro from ventas
group by codpro
having count(*) >= 10;

-- EJERCICIO 3.46
select codpro from proveedor
where codpro!='S1' and not exists(select codpie from ventas v1 where codpro='S1' and
not exists (select * from ventas v2 where v2.codpie=v1.codpie and v2.codpro=proveedor.codpro));


--EJERCICIO 3.47
select sum(cantidad) from ventas
where codpro in (select codpro from proveedor
where not exists (select codpie from ventas where codpro='S1'
minus
select codpie from ventas where codpro=proveedor.codpro));

--EJERCICIO 3.48
select codpj from proyecto
where not exists (select codpro from ventas where codpie='P3'
minus 
select codpro from ventas where codpj=proyecto.codpj);

select codpj from proyecto
where not exists (select codpro from ventas v1 where codpie='P3' and
not exists (select * from ventas v2 where v2.codpj=proyecto.codpj and v2.codpro=v1.codpro));

--EJERCICIO 3.49
select avg(cantidad) from ventas
where codpie='P3'
group by codpro;

-- EJERCICIO 3.52
select codpro,to_char(fecha,'yyyy'), avg(cantidad)
from ventas
group by codpro, to_char(fecha,'yyyy')
order by codpro;

-- EJERCICIO 3.53
select codpro from ventas natural join pieza
where color = 'Rojo';

-- EJERCICIO 3.54
select codpro from proveedor
where not exists (select codpie from pieza where color='Roja' and
not exists (select * from ventas where ventas.codpie=pieza.codpie and
ventas.codpro=proveedor.codpro));

select codpro from ventas
minus
select codpro from ventas
where codpie in (select codpie from pieza where color!='Rojo');

-- EJERCICIO 3.55
select distinct codpro from ventas
where codpie in (select codpie from pieza where color='Rojo');

-- EJERCICIO 3.56
select nompro from (ventas natural join proveedor)natural join pieza
where color='Rojo'
group by nompro
having(sum(cantidad) > 1);

-- EJERCICIO 3.57
((select codpro
from proveedor)
minus -- no venden más de 10 ud
(select codpro
from ventas
where cantidad<=10))
minus --no venden todas las piezas rojas
(select codpro
from ((select codpro, codpie
      from proveedor, pieza
      where color='Rojo')
      minus
      (select codpro, codpie
      from ventas))
);

-- EJERCICIO 5.58
update proveedor
set status = 1
where codpro in (select codpro from ventas
minus
select codpro from ventas
where codpie!='P1');

-- EJERCICIO 3.59
--Encuentra, de entre las piezas que no se han 
--vendido en septiembre de 2009, las ciudades de aquéllas que se 
--han vendido en mayor cantidad durante Agosto de ese mismo año
select codpie, ciudad, sum(cantidad) from (select * from ventas
where to_char(fecha, 'MM/YYYY')!='09/2009') natural join pieza
group by codpie, ciudad
having sum(cantidad) = (select max(sum(cantidad)) from (select * from ventas
where to_char(fecha, 'MM/YYYY')!='09/2009')
where to_char(fecha, 'MM/YYYY')!='08/2009' group by codpie);

select codpie, ciudad, sum(cantidad)
from ventas natural join ((select codpie from pieza)
    minus
    (select codpie from ventas
    where to_char(fecha, 'MM/YYYY')='09/2009'))
    natural join pieza
    where to_char(fecha, 'MM/YYYY')='08/2009'
    group by codpie, ciudad
    having sum(cantidad) = (select max(sum(cantidad))
                            from ventas natural join 
                                ((select codpie from pieza)
                                   minus
                                  (select codpie from ventas
                                   where to_char(fecha)='09/2009'))
                                   natural join pieza
                            where to_char(fecha, 'MM/YYYY')='08/2009'
                            group by codpie, ciudad);
                            
   
